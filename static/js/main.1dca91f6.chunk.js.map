{"version":3,"sources":["App.style.js","ui-components/Button.js","ui-components/FileInput.js","ui-components/Subtitle.js","ui-components/TextBox.js","ui-components/Title.js","components/HCard.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","InputSection","PreviewSection","Button","button","attrs","type","className","props","primary","FileInput","text","useField","name","setValue","id","onChange","event","reader","FileReader","file","currentTarget","files","readAsDataURL","onloadend","result","htmlFor","Subtitle","h6","TextBox","label","field","Title","h1","HCard","details","title","class","givenName","surname","src","photo","alt","email","phone","houseName","street","suburb","state","postcode","country","initialValues","App","onSubmit","_","setSubmitting","values","isSubmitting","disabled","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1dca91f6.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  width: 1000px;\n  border: 1px solid #9a9a9a80;\n\n  @media only screen and (max-width: 1000px) {\n    width: 100%;\n    border: none;\n    flex-direction: column;\n  }\n`;\n\nexport const InputSection = styled.div`\n  flex: 480px;\n  display: grid;\n  padding: 40px;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 20px;\n\n  .title,\n  .subtitle {\n    grid-column: 1/3;\n  }\n\n  .title {\n    margin-top: 0;\n  }\n\n  .text-box {\n    margin-bottom: 14px;\n  }\n\n  .button {\n    margin-top: 16px;\n  }\n\n  @media only screen and (max-width: 1000px) {\n    .text-box {\n      width: 100%;\n    }\n  }\n`;\n\nexport const PreviewSection = styled.div`\n  flex: 520px;\n  padding: 126px 45px;\n  border-left: 4px solid #d2d6d8;\n  background-color: #e0e4e7;\n\n  @media only screen and (max-width: 1000px) {\n    border: none;\n    padding: 35px;\n    border-top: 4px solid #d2d6d8;\n    display: flex;\n    justify-content: center;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button.attrs(({ type }) => ({ type, className: \"button\" }))`\n  height: 48px;\n  min-width: 190px;\n  padding: 12px 28px;\n  font-size: 18px;\n  cursor: pointer;\n  border: none;\n  border-radius: 4px;\n  border-bottom: 2px solid #00000080;\n  color: #fff;\n  text-align: center;\n  background-color: ${(props) =>\n    props.primary ? \"var(--primary-color)\" : \"var(--secondary-color)\"};\n\n  &:hover {\n    filter: brightness(0.9);\n  }\n`;\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport styled from \"styled-components\";\n\nfunction InputFileComponent({ text, className, ...props }) {\n  const [, , { setValue }] = useField(props.name);\n  return (\n    <div className={className}>\n      <input\n        type=\"file\"\n        id=\"file\"\n        onChange={(event) => {\n          const reader = new FileReader();\n          const file = event.currentTarget.files[0];\n          reader.readAsDataURL(file);\n          reader.onloadend = () => setValue(reader.result);\n        }}\n      />\n      <label htmlFor=\"file\">{text}</label>\n    </div>\n  );\n}\n\nexport const FileInput = styled(InputFileComponent).attrs(() => ({ className: \"button\" }))`\n  position: relative;\n\n  [type=\"file\"] {\n    height: 0;\n    overflow: hidden;\n    width: 0;\n  }\n\n  [type=\"file\"] + label {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    content: \"Upload\";\n    padding: 12px 28px;\n    font-size: 18px;\n    cursor: pointer;\n    border: none;\n    border-radius: 4px;\n    border-bottom: 2px solid #00000080;\n    color: #fff;\n    text-align: center;\n    outline: none;\n    background-color: var(--secondary-color);\n    -webkit-user-select: none;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Subtitle = styled.h6.attrs(() => ({ className: \"subtitle\" }))`\n  color: var(--secondary-text-color);\n  font-size: 10px;\n  text-transform: uppercase;\n  padding-bottom: 2px;\n  border-bottom: solid 1px var(--secondary-text-color);\n`;\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport styled from \"styled-components\";\n\nfunction TextBoxComponent({ label, className, ...props }) {\n  const [field] = useField(props.name);\n  return (\n    <>\n      <div className={className}>\n        <label>{label}</label>\n        <input type=\"text\" {...field}></input>\n      </div>\n    </>\n  );\n}\n\nexport const TextBox = styled(TextBoxComponent).attrs(() => ({ className: \"text-box\" }))`\n  width: 190px;\n\n  label {\n    display: block;\n    margin-bottom: 4px;\n    color: #2c3e50;\n    font-size: 12px;\n    text-transform: uppercase;\n  }\n\n  input[type=\"text\"] {\n    font-size: 16px;\n    font-family: Merriweather;\n    width: 100%;\n    height: 35px;\n    padding: 8px 10px;\n    border-radius: 4px;\n    border: solid 1px #c3c4c3;\n\n    &:focus {\n      border-color: #2980b9;\n    }\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const Title = styled.h1.attrs(() => ({ className: \"title\" }))`\n  font-size: 28px;\n  font-weight: 800;\n  color: var(--primary-text-color);\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nfunction HCardComponent({ details, title, className }) {\n  return (\n    <div className={\"box \" + className}>\n      <div class=\"legend\">{title}</div>\n      <div className=\"vcard\">\n        <div className=\"header\">\n          <h4 className=\"fn\">\n            {details.givenName} {details.surname}\n          </h4>\n          <img className=\"photo\" src={details.photo} alt=\"photograph\" />\n        </div>\n        <div className=\"body\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <span className=\"prop\">Email</span>\n              <span className=\"email text\">{details.email}</span>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <span className=\"prop\">Phone</span>\n              <span className=\"tel text\">{details.phone}</span>\n            </div>\n          </div>\n          <div className=\"adr\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <span className=\"prop\">Address</span>\n                <span className=\"text\">\n                  <span className=\"post-office-box\">{details.houseName}&nbsp;</span>\n                  <span className=\"street-address\">{details.street}</span>\n                </span>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <span className=\"prop\"></span>\n                <span className=\"text\">\n                  <span className=\"locality\">{details.suburb}&nbsp;</span>\n                  <span className=\"region\">{details.state}</span>\n                </span>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <span className=\"prop\">Postcode</span>\n                <span className=\"postal-code text\">{details.postcode}</span>\n              </div>\n              <div className=\"col\">\n                <span className=\"prop\">Country</span>\n                <span className=\"country-name text\">{details.country}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst HCard = styled(HCardComponent)`\n  width: 430px;\n  height: 300px;\n  position: absolute;\n\n  .legend {\n    color: #95a5a6;\n    font-size: 16px;\n    text-align: right;\n    margin-bottom: 10px;\n    text-transform: uppercase;\n  }\n\n  .header {\n    height: 100px;\n    padding: 24px 56px 24px 20px;\n    color: #fff;\n    font-family: Merriweather;\n    font-size: 24px;\n    font-weight: bold;\n    background-color: #2c3e50;\n  }\n\n  .photo {\n    position: absolute;\n    top: 42px;\n    right: 24px;\n    width: 84px;\n    height: 104px;\n    background-color: #fff;\n    box-shadow: 0px 1px 1px 0 rgba(154, 154, 154, 0.75);\n  }\n\n  .body {\n    height: 210px;\n    padding: 32px 24px;\n    background-color: #fff;\n    border-bottom: 2px solid #00000080;\n  }\n\n  .prop {\n    display: inline-block;\n    width: 70px;\n    font-size: 10px;\n    color: #34495e;\n    text-transform: uppercase;\n  }\n\n  .text {\n    font-size: 16px;\n    font-family: Merriweather;\n  }\n\n  .row {\n    display: flex;\n    border-bottom: 1px solid #e4e8e9;\n    margin-bottom: 14px;\n  }\n\n  .col {\n    flex: 1;\n  }\n`;\n\nexport default HCard;\n","import React from \"react\";\nimport { Formik, Form } from \"formik\";\n\nimport { Container, InputSection, PreviewSection } from \"./App.style\";\nimport { Button, FileInput, Subtitle, TextBox, Title } from \"./ui-components\";\n\nimport HCard from \"./components/HCard\";\n\nconst initialValues = {\n  givenName: \"\",\n  surname: \"\",\n  email: \"\",\n  phone: \"\",\n  houseName: \"\",\n  street: \"\",\n  suburb: \"\",\n  state: \"\",\n  postcode: \"\",\n  country: \"\",\n  photo: \"default.png\",\n};\n\nfunction App() {\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(_, { setSubmitting }) => {\n          setSubmitting(false);\n        }}\n      >\n        {({ values, isSubmitting }) => (\n          <Form>\n            <Container>\n              <InputSection>\n                <Title>hCard Builder</Title>\n                <Subtitle>Personal Details</Subtitle>\n                <TextBox name=\"givenName\" label=\"Given Name\" />\n                <TextBox name=\"surname\" label=\"Surname\" />\n                <TextBox name=\"email\" label=\"Email\" />\n                <TextBox name=\"phone\" label=\"Phone\" />\n                <Subtitle>Address</Subtitle>\n                <TextBox name=\"houseName\" label=\"House Name or #\" />\n                <TextBox name=\"street\" label=\"Street\" />\n                <TextBox name=\"suburb\" label=\"Suburb\" />\n                <TextBox name=\"state\" label=\"State\" />\n                <TextBox name=\"postcode\" label=\"Postcode\" />\n                <TextBox name=\"country\" label=\"Country\" />\n                <FileInput name=\"photo\" text=\"Upload Avatar\"></FileInput>\n                <Button type=\"submit\" primary disabled={isSubmitting}>\n                  Create hCard\n                </Button>\n              </InputSection>\n              <PreviewSection>\n                <HCard title=\"hCard Preview\" details={values} />\n              </PreviewSection>\n            </Container>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"normalize.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// To disable service workers, change register() to unregister() below.\nserviceWorker.register();\n"],"sourceRoot":""}